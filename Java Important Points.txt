JDK
JRE
JVM

What is the default package imported by Java program or JVM?

import => #include in C and C++
import is a keyword in Java which imports predefined packages and classes in to the java program
java.lang is the default package imported by JVM at the time of execution
Package = group of similar type classes which contains similar type of code

Example:
java.lang
======
  -- String
  -- StringBuffer
  --System
etc.,
java.util
======
   --Scanner

java.sql
etc.,

Java Variables
===========
Any identifier which changes the value while executing program is called as variable

members of class = variables + methods

types of variables
============
class variable (this i have to cover static keyword)
instance variable
local variable/method variable
parameter

Java Methods
===========
it is block of statements that has name and can be executed by calling it using the name.
these are members of class along with variables

Example:
======

Write a Java Program to create a class called Product (id,name,price) and write two methods to read the product details and display the product details
and store them in an array 
Use above program and write a method bookAnOrder() to place order for above products.


Constructor
=========

1public class Student{
 2   private String stdId;
3    private String stdName;
4    private String courseName;

5    //constructor 
 6   //default constructor
 7   //sington class
8    public Student(){
9
 10   }   
11   //parameterised constructor
 12   public Student(String stdId){
13
 14   }

15    //parameterised constructor
 16   public Student(String stdName){
   17     
   18 }
}

what is the output of the above program?

a) Compilation error(answer)
b) No error
c) Runtime error
d) None of the above

Are Constructors are members of the class?
a) True
b) False(answer)

how to call the constructor?
a) constructors are called automatically when an object is created(answer)
b) code should call the constructor
c) compiler calls the constructor
d)None of the above

Can we overload the constructors?
a)true(answer)
b)false

can constructors return a value?
a)true
b)false(answer)

what is the output of the following program?

public class Student{
    private int stdId;
    private String stdName;
    private String courseName;

    //constructor 
    //default constructor
    //sington class
    public void Student(){

    }  
}

a) Compilation error(answer)
b) No error
c) Runtime error
d) None of the above

what are the access specifiers that we can use it with constructor?
a)public
b)private
c)default
d)protected
e) all of the above(answer)
f) None of the above

what are the access specifiers that we can use it with class?
a)public(answer)
b)private
c)default(answer)
d)protected
e) all of the above
f) None of the above

what are the access specifiers that we can use it with method?
a)public
b)private
c)default
d)protected

choice
1) a and b
2) b and c
3) c and d
4) a and d
5) all of the above(answer)
6) none of the above

Questions
========
_____ class Student{
    private String stdId;
    private String stdName;
    private String courseName;
}

choose 2 which can be filled in the above blank

a)default(answer)
b)private
c)public(answer)
d)protected

can we use this keyword with localvariables or parameters?
a)true
b)false(answer)

what is the output of the following program?

public class Student{
    private int stdId;
    private String stdName;
    private String courseName;

    //constructor 
    public Student(int id,String stdName){
	stdId = this.id;
    }  
}

a) Compilation error(answer)
b) No error
c) Runtime error
d) None of the above

Static
====
static keyword can be used with

static data or code can be accessed in nonstatic block but 
nonstatic data cannot be accessed inside the static block(static method or static class or static bloc)

because
nonstatic data is loaded in to memory using object but static data doesnot need support of object to store in the memory

1) Method
=======
calculateSalary() in EmployeeManagementSystem
displayResults() in StudentManagementSystem
placeOrder() in onlineFoodOrderingApplication
etc.,
Points
====
static methods does not belong to object,means static methods belongs to class


2) Class
3) Variable => to declare the data which is common for all the objects
Example
======
companyName in PayrollProjectApp
universityName in universityManagementApp
collegeName in CollegeManagementApp etc.,

4) Block
5) import



Inheritance and types of Inheritance
==========================
what are the class members that are inherited?

public,protected and default methods,variables

which are not inherited to subclass?

constructors
private methods
final methods
static methods 

=> If A class extended to B class we will create an object for the B()(means in inheritance we will create an object to subclass not the super class)
         =>when we create an object for subclass it instantiates super class(es) also
                          => if we create an object for subclass to instantiate the super class(es) it calls super class constructors

=> if developer doesnot provide a constructor,Java Compiler adds a default constructor

final
===
final is used to
- to declare values which are not changed(constants)
example:
======
final float PI = 3.14f;
final float e = 2.718f;

-  to stop inheritance
example
======
class A{

}
final class B extends A{

}
class C extends B{

}

- to stop methodoverding

What is polymorphism?

Executing the same code with different data

There are two type of polymorphism:

1. Method Overriding or Runtime Polymorphism or Late binding
2. Method Overloading or Compiletime Polymorphism or Early binding

1. Method Overriding or Runtime Polymorphism or Late binding
==============================================
Rules
====
a. In method overriding both methods should have same method signature(Access specifier + return type + methodname + parameterlist)
b. Method overriding should be implemented in two different class which are implementing inheritance
c. we cannot deccrease the visibility(access specfier) of the method
d. private methods cannot be overriden
e.static methods cannot be overriden

2. Method Overloading or Compiletime Polymorphism or Early binding
==============================================
Rules
====
a. In method overloading both methods should not have same method signature(Access specifier + return type + methodname + parameterlist)
b. Method overloading can be implemented in two different classes or in the same class
c. we can decrease the visibility(access specfier) of the method
d. private methods can be overloaded
e.static methods can be overloaded

this
===
this keyword is used to access current class
methods
variables and 
constructors

super
====
super keyword is used to access super class
methods
variables and constructors

Calling a constructor inside another constructor is called as constructor chaining
using this and super we can implement constructor chaining.

How to create and access and manipulate the string?




Strings in Java
==========
A group of characters is called as strings
strings store the characters like Array.
String in Java is a predefined class declared in java.lang package
Strings are immutable
Example:
=======
String name = "Rama";
String email = new String();
String role = new String("HR");
char city = {'D','E','L','H','I'};
String destination = new String(city);

HandsOn
=======
1. Write a java program to reverse a given string?
2. Write a java program to remove all duplicate characters from a string?
3. Write a java program to read two strings and remove all the character from the first string which are present in the second string?



Object is a class in java.lang package
which is super class for all classes in Java

equals()
hashcode()
toString()

can we override above methods?
Yes,we can override above object methods


Exceptions in Java
==============
Two types of exceptions

1. RunTime Exception or UnCheckedException
==================================
Example
=======
ArithmeticException
NullPointerException etc

2. CompileTime Exception or CheckedException
===================================
Example
======
SQLException
FileNotFoundException
IOException

Different ways to handle the exception:
============================
1. try - catch - finally(preferred)
2. throws
3. throw

Abstract Class
==========
Abstract class in java is a class which consists of 
implemented methods and unimplemented methods

Abstract Method
============
method which does not have body

can we have zero abstract methods in abstract class?
true (answer)
false

can we create an object to abstract class?
or
can we instantiate an abstract class?

yes
no(answer)

who allocates the memory for the abstract class?
subclass object allocates the memory for abstract class

can we have constructor for the abstract class?

yes(answer)
no

can we have static methods and variables in the abstract class?

true(answer)
false

interface
========
it contains only abstract methods 

can we create an object to the interface?
true
false(answer)

what is the default access specifier for the abstract methods in interface?
a)public(answer)
b) protected
c)private
d)None of these

what is the default access specifiers for the variables defind in the interface?
public static and final

can we have implemented methods in interface?
yes(answer) => Java 8 allows default and static methods inside the interface
no

what is the output of the following program?
interface A{
int a ;//1 => here it is error
public void display();}//2
public class B implements A{//3=> here it is error

}

a) Compilation error at line 1
b) Compilation error at line 2
c) Compilation error at line 1,3(answer)
d) none of the above

Choose the right answer based on following scenario?
if an interface contains 12 methods and a class implemented 10 methods of this interface

a) Class which implemented the interface should declare as abstract(answer)
b) No need to declare anything
c) JVM implements other two methods
d) none of the above

Collections in Java?
===============
Collections are datastructures where we can store objects and manipulate the objects(save,read,update,delete).
In Java 1.2 => Collections Framework
Java Collections
============
unified architecture for storing and manipulating the object which contains interfaces,classes and algorithms to process the data/objects stored in a collection.

Collection is an interface in java.util package

Wrapper Classes
=============
Classes which are helper classes to convert primitive data type to object and vice versa.
these are introduced  in Java 5.
Autoboxing and unboxing feature in java 6

primitive data type to object => Autoboxing 
object to primitive data type => unboxing 


int  => Integer
short => Short
byte => Byte
long => Long
float => Float
double => Double
char => Character
boolean => Boolean

Crud operations using collections in Java?

Note:
=====
can we nest an interface inside another interface
can we declare an interface inside a class

empList.put(123, "Rama"); => entrySet

Entry is an nested interface in Map interface which contains entrySet() method which separates keys and values and we can access them using
getKey() and getValue() methods

Hash Map doesnot follow insertion order
Hash map may allow one null value as key
Hash map allows multiple nulls as values
Hash Map is not synchornized.

{12345=Student@7d6f77cc, 12346=Student@5aaa6d82, 12347=Student@73a28541, 12348=Student@6f75e721}


"Student [studentAge=" + studentAge + ", studentId=" + studentId + ", studentName=" + studentName + "]"
Student [studentAge=21, studentId=123, studentName=Rama]

{12345=Student [studentAge=21, studentId=123, studentName=Rama], 12346=Student [studentAge=21, studentId=124, studentName=Rama krishna], 12347=Student [studentAge=21, studentId=125, studentName=Rama rao], 12348=Student [studentAge=21, studentId=126, studentName=Ram]}

Comparable and Comparator Interface
============================
these interfaces used to compare two user-defined objects

When we have to compare two user defined objects we have to override

equals and hashcode methods of Object class should be overriden to compare these user defined objects

Comparator Interface
===============
compare(Obj1,obj2) and equals(Object)

you can sort the data based on any data member

Maven
=====
is a project build tool
which organizes the dependencies using an XML file called pom.xml


Steps
===
download maven and setup the path for java_home and maven


JDBC
====
Java DataBase Connectivity

All interfaces and classes that supports JDBC are declared in java.sql package

5 steps to connect with database using java program:

1. Load Driver Class
2.Establish the connection using database url,username and password
3.Create Statement

identifiers are class name,variable name,method name etc.,

Coding Conventions in Java
========================
class name is discouraged. By convention, Java class names usually start with an uppercase letter

Example:
=======
TradeConfirmationStatus
LoanApplicationForm
GroupCreation
TransactionStatus

variables are identifiers to store data, Variable names are usually uses camelCase

Ex: studentName
      customerName
      loanType
      paymentStatus
      groupName
      tradeCurrency

methods are identifiers to store behaviour or code that access data in a class are usually uses camelCase

Ex: readStudentName()
      getCustomerName()
      enterLoanType()
      updatePaymentStatus()
      enterGroupName()
      selectTradeCurrency()

